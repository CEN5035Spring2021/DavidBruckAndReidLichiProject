diff --git a/node_modules/jest-dev-server/lib/global.js b/node_modules/jest-dev-server/lib/global.js
index d789078..552c107 100644
--- a/node_modules/jest-dev-server/lib/global.js
+++ b/node_modules/jest-dev-server/lib/global.js
@@ -20,6 +20,7 @@ var _waitOn = _interopRequireDefault(require("wait-on"));
 
 var _findProcess = _interopRequireDefault(require("find-process"));
 
+const { exit } = require("process");
 var _util = require("util");
 
 var _treeKill = _interopRequireDefault(require("tree-kill"));
@@ -38,7 +39,8 @@ const DEFAULT_CONFIG = {
   port: null,
   protocol: 'tcp',
   usedPortAction: 'ask',
-  waitOnScheme: {}
+  waitOnScheme: {},
+  path: null
 };
 const pTreeKill = (0, _util.promisify)(_treeKill.default);
 const serverLogPrefixer = new _stream.default.Transform({
@@ -87,11 +89,33 @@ function runServer(config = {}, index) {
     cwd: (0, _cwd.default)()
   }, config.options));
 
-  if (config.debug) {
-    // eslint-disable-next-line no-console
-    console.log(_chalk.default.magentaBright('\nJest dev-server output:'));
-    servers[index].stdout.pipe(serverLogPrefixer).pipe(process.stdout);
-  }
+  const buffers = [];
+  const addToBuffer = (isError, data) => {
+    if (!buffers.length || Buffer.compare(buffers[buffers.length - 1].data, data)) {
+      buffers.push({
+        data,
+        isError
+      });
+    }
+  };
+  servers[index].stdout.pipe(serverLogPrefixer).on('data', addToBuffer.bind(null, false));
+  servers[index].stderr.pipe(serverLogPrefixer).on('data', addToBuffer.bind(null, true));
+
+  servers[index].on('exit', code => {
+    if (config.serversStarted && !config.serversStarted.started || config.debug) {
+      if (config.debug) {
+        // eslint-disable-next-line no-console
+        console.log(_chalk.default.magentaBright('\nJest dev-server output:'));
+      }
+      for (const buffer of buffers) {
+        process[buffer.isError ? 'stderr' : 'stdout'].write(buffer.data);
+      }
+    }
+    
+    if (config.serversStarted && !config.serversStarted.started) {
+      exit(code || 1);
+    }
+  });
 }
 
 async function outOfStin(block) {
@@ -113,7 +137,7 @@ function getIsPortTaken(config) {
   const cleanupAndReturn = result => new Promise(resolve => server.once('close', () => resolve(result)).close());
 
   return new Promise((resolve, reject) => {
-    server = _net.default.createServer().once('error', err => err.code === 'EADDRINUSE' ? resolve(cleanupAndReturn(true)) : reject()).once('listening', () => resolve(cleanupAndReturn(false))).listen(config.port, config.host);
+    server = _net.default.createServer().once('error', err => err.code === 'EADDRINUSE' || (err.code == "EACCES" && config.usedPortAction === 'ignore') ? resolve(cleanupAndReturn(true)) : reject()).once('listening', () => resolve(cleanupAndReturn(false))).listen(config.port, config.host);
   });
 }
 
@@ -197,7 +221,10 @@ async function setupJestServer(providedConfig, index) {
     if (protocol === 'tcp' || protocol === 'socket') {
       url = `${protocol}:${host}:${port}`;
     } else {
-      url = `${protocol}://${host}:${port}`;
+      url = `${protocol}://${host}:${port}` +
+        (config.path
+          ? (config.path[0] === '/' ? config.path : `/${config.path}`)
+          : '');
     }
 
     const opts = _extends({
@@ -208,7 +235,7 @@ async function setupJestServer(providedConfig, index) {
     try {
       await (0, _waitOn.default)(opts);
     } catch (err) {
-      throw new JestDevServerError(`Server has taken more than ${launchTimeout}ms to start.`, ERROR_TIMEOUT);
+      throw new JestDevServerError(`Server has taken more than ${launchTimeout}ms to start:\n${config.command}`, ERROR_TIMEOUT);
     }
   }
 }
